package tw.lab.classes;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.LinkedList;

import javax.swing.JColorChooser;
import javax.swing.JPanel;

public class MyPanel_v2 extends JPanel {

	private LinkedList<Line> lineBox, lineMove;
	private Color color=Color.BLACK;
	public int drawType = 1; // 1:Line, 2:Rectangle

	public MyPanel_v2() {
		setBackground(Color.WHITE);
		setForeground(Color.BLACK);

		lineBox = new LinkedList<>();
		lineMove = new LinkedList<>();

		MyMouseListener listener = new MyMouseListener();
		addMouseListener(listener);
		addMouseMotionListener(listener);
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);

		Graphics2D g2d = (Graphics2D) g;

		for (Line line : lineBox) {
			g2d.setColor(line.color);
			for (int i = 1; i < line.points.size(); i++) {
				if (drawType == 1) {
					g2d.setStroke(new BasicStroke(5, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
					g2d.drawLine(line.points.get(i - 1).x, line.points.get(i - 1).y, line.points.get(i).x,
							line.points.get(i).y);
				} else if (drawType == 2) {
					g2d.setStroke(new BasicStroke(5, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
					int width;
					int widthStart;
					int height;
					int heightStart;
					if (line.points.get(i).x >= line.points.get(i - 1).x) {
						widthStart = line.points.get(i - 1).x;
						width = line.points.get(i).x - line.points.get(i - 1).x;
					} else {
						widthStart = line.points.get(i).x;
						width = line.points.get(i - 1).x - line.points.get(i).x;
					}
					if (line.points.get(i).y >= line.points.get(i - 1).y) {
						heightStart = line.points.get(i - 1).y;
						height = line.points.get(i).y - line.points.get(i - 1).y;
					} else {
						heightStart = line.points.get(i).y;
						height = line.points.get(i - 1).y - line.points.get(i).y;
					}
					g2d.drawRect(widthStart, heightStart, width, height);
				}
			}
		}

	}

	private class MyMouseListener extends MouseAdapter {
		@Override
		public void mousePressed(MouseEvent e) {
			Line line = new Line(e.getX(), e.getY(), color);
			lineBox.add(line);
		}

		@Override
		public void mouseDragged(MouseEvent e) {
			Point point = new Point();

			if (drawType == 1) {
				lineBox.getLast().addPoint(e.getX(), e.getY());
			} else if (drawType == 2) {
				point.x = e.getX();
				point.y = e.getY();
//				point.color = getForeground();
				if (lineBox.getLast().points.size() > 1) {
					lineBox.getLast().points.removeLast();
					lineBox.getLast().points.add(point);
				} else {
					point.x = e.getX();
					point.y = e.getY();
//					point.color = getForeground();
					lineBox.getLast().points.add(point);
				}
			}
			repaint();
		}
	}

	public void paintClear() {
		for (Line line : lineBox) {
			lineMove.add(line);
		}
		lineBox.clear();
	}

	public void undo() {
		if (lineBox.size() >= 1) {
			lineMove.add(lineBox.pollLast());
		}
	}

	public void redo() {
		if (lineMove.size() >= 1) {
			lineBox.add(lineMove.pollLast());
		}
	}

	public Color getColor() {
		return color;
	}

	public void setColor(Color color) {
		this.color = color;
		setForeground(color);
		repaint();
	}

}

class Point {
	int x, y;
}

class Line {
	LinkedList<Point> points;
	Color color;

	Line(int x, int y, Color color) {
		this.color = color;
		points = new LinkedList<Point>();
//		addPoint(x, y);
	}

	void addPoint(int x, int y) {
		Point point = new Point();
		point.x = x;
		point.y = y;
		points.add(point);
	}
}
