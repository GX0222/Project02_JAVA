package tw.lab.classes;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.LinkedList;

import javax.swing.JColorChooser;
import javax.swing.JPanel;

public class MyPanel_v2 extends JPanel {

	private LinkedList<LinkedList<Point>> lineBox;
	private LinkedList<LinkedList<Point>> lineMove;

	public MyPanel_v2() {
		setBackground(Color.yellow);
		setForeground(Color.BLACK);

		lineBox = new LinkedList<>();
		lineMove = new LinkedList<>();
		

		MyMouseListener listener = new MyMouseListener();
		addMouseListener(listener);
		addMouseMotionListener(listener);
	}

//	int i = 1;

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);

//		if (g instanceof Graphics2D) {
//			System.out.println("Ok" + i);
//		} else {
//			System.out.println("XX");
//		}

		Graphics2D g2d = (Graphics2D) g;

		

//		g2d.drawLine(0, 0, 200, 400);

		for (LinkedList<Point> line : lineBox) {
			for (int i = 1; i < line.size(); i++) {
				g2d.setColor(line.get(i).color);
				g2d.setStroke(new BasicStroke(5));
				g2d.drawLine(line.get(i - 1).x, line.get(i - 1).y, line.get(i).x, line.get(i).y);
			}
		}

//		i++;

	}

	private class MyMouseListener extends MouseAdapter {
		@Override
		public void mousePressed(MouseEvent e) {
			lineMove.clear();
			Point point = new Point();
			point.x = e.getX();
			point.y = e.getY();
			point.color =getForeground();
			
			Color testc = getForeground();
			System.out.println(testc);

			LinkedList<Point> line = new LinkedList<>();
			line.add(point);
			lineBox.addLast(line);
		}

		@Override
		public void mouseDragged(MouseEvent e) {
			Point point = new Point();
			point.x = e.getX();
			point.y = e.getY();
			point.color =getForeground();

			lineBox.getLast().add(point);
			repaint();
		}
	}

	public void paintClear() {
		for(LinkedList<Point> line:lineBox) {
			lineMove.add(line);
		}
		lineBox.clear();
//		repaint();
	}

	public void undo() {
		if (lineBox.size() >= 1) {
			lineMove.add(lineBox.pollLast());
		}
	}

	public void redo() {
		if (lineMove.size() >= 1) {
			lineBox.add(lineMove.pollLast());
		}
	}
	
	public Color changeColor () {
		Color newColor = JColorChooser.showDialog(getRootPane(), getName(), getForeground());
		setForeground(newColor);
		return newColor;
	}
	
	public Color changeTextColor () {
		Color oldColor = JColorChooser.showDialog(getRootPane(), getName(), getForeground());
		Color newColor = getContrastColor(oldColor);
		setForeground(newColor);
		return newColor;
	}
	
	public Color getContrastColor(Color oldColor) {
		int red = 255 - oldColor.getRed();
        int green = 255 - oldColor.getGreen();
        int blue = 255 - oldColor.getBlue();
        return new Color(red, green, blue);
	}

}

class Point {
	int x, y;
	Color color;
}
